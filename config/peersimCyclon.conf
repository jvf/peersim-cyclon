#range.0 k;1:100|1
#range.1 size;1000,2000,5000,10000,20000,50000,100000
range.1 size;10000

SIZE 10000

CYCLE 1000
CYCLES 101

MINDELAY 20
MAXDELAY 70
DROP 0

#random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

protocol.urt UniformRandomTransport
{
	mindelay (CYCLE*MINDELAY)/100
	maxdelay (CYCLE*MAXDELAY)/100
}

protocol.tr UnreliableTransport
{
	transport urt
	drop DROP
}

protocol.gossip example.cyclon.Cyclon
{
	cache 20
	l 5

	step CYCLE
	transport tr
	period CYCLE
}

#protocol.gossip example.newscast.Newscast
#{
#	cache 50
#
#	step CYCLE
#	transport tr
#	period CYCLE
#}

init.sch CDScheduler
{
	protocol gossip
	#randstart
}

init.wire WireKOut
{
	protocol gossip
	k 20
}

#control.stats GraphStats
#{
#	protocol gossip
#	undir
#	
#	nl SIZE/2
#	nc SIZE/2
#	
#	step CYCLE
#	from 99000
#}

#####################################################
control.degree example.reports.DegreeObserver
{
	protocol gossip
#	dead
	
	step CYCLE
	from 100000
}

#control.dynamic DynamicNetwork
#{
#	add -50000
#	
#	from 100000
#	until 101000
#	
#	step CYCLE
#}
#####################################################
